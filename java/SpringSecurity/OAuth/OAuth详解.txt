   OAUTH协议为用户资源的授权提供了一个安全的、开放而又简易的标准。与以往的授权方式不同之处是OAUTH的授权不会使第三方触及到用户的帐号信息（如用户名与密码），即第三方无需使用用户的用户名与密码就可以申请获得该用户资源的授权，因此OAUTH是安全的。oAuth是Open Authorization的简。



（1）Third-party application：第三方应用程序，本文中又称"客户端"（client）

（2）HTTP service：HTTP服务提供商，一般指资源提供者（provider）

（3）Resource Owner：资源所有者，一般指用户。

（4）User Agent：用户代理，本文中就是指浏览器。

（5）Authorization server：认证服务器，即服务提供商专门用来处理认证的服务器，认证用户的身份和产生令牌。

（6）Resource server：资源服务器，即服务提供商存放用户生成的资源的服务器和验证令牌。它与认证服务器，可以是同一台服务器，也可以是不同的服务器



                    0.访问client
请求流程：         ------------> Third-party application--------->
                   1.请求授权	     /		   
    Custome       <-----------      /
	          2.授予权限       /   
		   ------------>--/
		  	

OAuth授权模式：1.授权码模式（authorization code）2.简化模式（implicit）3.密码模式（resource owner password credentials）4.客户端模式（client credentials）

授权码模式（authorization code）:是功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与"服务提供商"的认证服务器进行互动。

简化模式（implicit grant type）:不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了"授权码"这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访者是可见的且客户端不需要认证。

密码模式（Resource Owner Password Credentials Grant）:用户向客户端提供自己的用户名和密码。客户端使用这些信息，向"服务商提供商"索要授权。

客户端模式（Client Credentials Grant）: 指客户端以自己的名义，而不是以用户的名义，向"服务提供商"进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端册，客户端以自己的名义要求"服务提供商"提供服务，其实不存在授权问题。

注：http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html
http://www.rfcreader.com/#rfc6749
https://docs.spring.io/spring-security/site/docs/4.2.7.RELEASE/reference/htmlsingle/











