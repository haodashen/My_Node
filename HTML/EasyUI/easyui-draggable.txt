使用draggable组件可以创建可拖动的组件，只要给它添加draggable的类属性就可以实现拖动了。

--------------------------------------属性-----------------------------------------------------------
cursor：拖动时的指针样式，默认是move。
axis：限定垂直或水平方法拖拽，可选值v或h
edge：设定在距离元素边距多宽的位置内可以拖动
delay：定义元素在多少毫秒后开始移动
revert：设置为true，一旦停止拖动将返回原始位置
handle：用来指定开始拖动的句柄，光标点到哪个位置才能拖动。默认情况下，光标在任何位置都可以拖动。
deltaX：被拖动元素相对于光标的位置x，仅在使用代理时有效
deltaY：被拖动元素相对于光标的位置y，仅在使用代理时有效
proxy：指定拖动元素的过程中所使用的代理元素，这个代理元素只有拖动的过程中可见，有两种设置方法：
		第一种：使用clone字符串，也就是在拖动的时候，使用该元素的一个复制元素作为代理元素。
		第二种；创建代理元素，函数必须有返回值，而且这个返回值只能是一个对象
		proxy:function(source){
			var str = "<div style='border:1px solid #FB0404;width:200px;height:80px;opacity:0.5;filter:alpha(opacity=50)'></div>";
			var p=$(str);
			$('body').append(p);
			return p;
		}
		通过函数创建拖动代理元素时，还可以传递一个source参数，这个参数代表的就是被拖动的元素对象。
		proxy:function(source){
			var str = "<div style='border:1px solid #FB0404;width:200px;height:80px;opacity:0.5;filter:alpha(opacity=50)'></div>";
			var p=$(str);
			p.html($(source).html()).appendTo('body');
			return p;
		}
	

--------------------------------------事件-----------------------------------------------------------
onBeforeDrag：在拖动前触发，返回false将取消拖动
onDrag：在拖动时触发，当不能再拖动时返回false。
	如：限定只能在父容器中拖动
				<script>
				$(function(){
					$('.in').draggable({
						onDrag:function(e){
							var d = e.data;
							if(d.left<0) d.left=0;
							if(d.top<0) d.top=0;
							if(d.left+$(d.target).outerWidth()>$(d.parent).width()){
								d.left = $(d.parent()).width() - $(d.target).outerWidth();
							}
							if(d.top+$(d.target).outerHeight()>$(d.parent).height()){
								d.top = $(d.parent()).heigth() - $(d.target).outerHeight();
							}
						}
					});
				});
			</script>
		</head>
		<body>
			<div style="width:800px;height:500px;background:#CEDCFD;position:relative;">
				<div class="easyui-draggable in">
					<b>要拖动的div</b>
				</div>
			</div>
		</body>
--------------------------------------方法-----------------------------------------------------------
enable：启动拖动
proxy：如果设置了代理属性，则返回该拖动代理元素
